================================================================================
üìã INFORMACI√ìN COMPLETA DEL BACKEND - √ÅREAS COMUNES (COMMON AREAS)
================================================================================
Fecha: 12 de septiembre de 2025
Proyecto: Smart Condominium Backend - Fase 3
================================================================================

üîó 1. RUTAS DE API DISPONIBLES:
================================================================================

‚úÖ GET    /api/administration/common-areas/           - Listar todas las √°reas
‚úÖ POST   /api/administration/common-areas/           - Crear nueva √°rea
‚úÖ GET    /api/administration/common-areas/{id}/      - Obtener √°rea espec√≠fica
‚úÖ PUT    /api/administration/common-areas/{id}/      - Actualizar √°rea completa
‚úÖ PATCH  /api/administration/common-areas/{id}/      - Actualizar √°rea parcial
‚úÖ DELETE /api/administration/common-areas/{id}/      - Eliminar √°rea

üìã ESTADO ACTUAL SEG√öN LOGS:
- GET: ‚úÖ Funciona correctamente
- POST: ‚úÖ Funciona (visto en logs: status 201 Created)
- PUT/PATCH: ‚úÖ Disponible (ModelViewSet completo)
- DELETE: ‚úÖ Disponible (ModelViewSet completo)

================================================================================
üèóÔ∏è 2. MODELO DEL BACKEND (CommonArea):
================================================================================

üìÇ Archivo: administration/models.py
üìç L√≠neas: 125-140

class CommonArea(models.Model):
    """Modelo para las √°reas comunes del condominio"""
    
    # CAMPOS DEL MODELO:
    name = models.CharField(
        max_length=100, 
        verbose_name="Nombre del √°rea"
    )
    
    description = models.TextField(
        blank=True, 
        verbose_name="Descripci√≥n"
    )
    
    capacity = models.PositiveIntegerField(
        verbose_name="Capacidad de personas"
    )
    
    booking_price = models.DecimalField(
        max_digits=10, 
        decimal_places=2,
        verbose_name="Precio por reserva"
    )
    
    # METADATOS:
    class Meta:
        verbose_name = "√Årea Com√∫n"
        verbose_name_plural = "√Åreas Comunes"
        ordering = ['name']  # Ordenado alfab√©ticamente
        
    def __str__(self):
        return f"{self.name} (Cap: {self.capacity})"

================================================================================
üìù 3. SERIALIZER DEL BACKEND:
================================================================================

üìÇ Archivo: administration/serializers.py
üìç L√≠neas: 99-104

class CommonAreaSerializer(serializers.ModelSerializer):
    """Serializer para el modelo CommonArea"""
    
    class Meta:
        model = CommonArea
        fields = ['id', 'name', 'description', 'capacity', 'booking_price']
        # Todos los campos son read-write excepto 'id'
        read_only_fields = ['id']

================================================================================
üéØ 4. VIEWSET DEL BACKEND:
================================================================================

üìÇ Archivo: administration/views.py
üìç L√≠neas: 99-107

class CommonAreaViewSet(viewsets.ModelViewSet):
    """ViewSet para gestionar las √°reas comunes"""
    queryset = CommonArea.objects.all()
    serializer_class = CommonAreaSerializer
    permission_classes = [IsAuthenticated]  # Requiere JWT Token
    
    def get_queryset(self):
        """Optimizar consultas y ordenar por nombre"""
        return CommonArea.objects.order_by('name')

FUNCIONALIDADES INCLUIDAS:
‚úÖ CRUD Completo (Create, Read, Update, Delete)
‚úÖ Autenticaci√≥n JWT requerida
‚úÖ Paginaci√≥n autom√°tica (20 items por p√°gina)
‚úÖ Ordenamiento por nombre
‚úÖ Filtrado y b√∫squeda disponible

================================================================================
üìä 5. ESTRUCTURA DE DATOS EXACTA:
================================================================================

TIPOS DE DATOS POR CAMPO:

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ CAMPO           ‚îÇ TIPO         ‚îÇ REQUERIDO   ‚îÇ DESCRIPCI√ìN                    ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ id              ‚îÇ INTEGER      ‚îÇ AUTO        ‚îÇ ID √∫nico (auto-generado)       ‚îÇ
‚îÇ name            ‚îÇ STRING       ‚îÇ ‚úÖ S√ç       ‚îÇ Nombre del √°rea (m√°x 100 chars)‚îÇ
‚îÇ description     ‚îÇ TEXT         ‚îÇ ‚ùå NO       ‚îÇ Descripci√≥n opcional (ilimitado)‚îÇ
‚îÇ capacity        ‚îÇ INTEGER      ‚îÇ ‚úÖ S√ç       ‚îÇ Capacidad personas (positivo)  ‚îÇ
‚îÇ booking_price   ‚îÇ DECIMAL      ‚îÇ ‚úÖ S√ç       ‚îÇ Precio (10 d√≠gitos, 2 decimales)‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

VALIDACIONES ESPEC√çFICAS:
- name: No puede estar vac√≠o, m√°ximo 100 caracteres
- description: Puede estar vac√≠o, sin l√≠mite de caracteres
- capacity: Debe ser un entero positivo (> 0)
- booking_price: Debe ser decimal v√°lido (formato: XXXXX.XX)

VALORES POR DEFECTO:
- id: Auto-generado por la base de datos
- name: Sin valor por defecto (requerido)
- description: String vac√≠o ("")
- capacity: Sin valor por defecto (requerido)
- booking_price: Sin valor por defecto (requerido)

================================================================================
üì§ 6. FORMATO PARA POST (CREAR NUEVA √ÅREA):
================================================================================

ENDPOINT: POST /api/administration/common-areas/
HEADERS REQUERIDOS:
  Authorization: Bearer <jwt_token>
  Content-Type: application/json

EJEMPLO 1 - √ÅREA COMPLETA:
{
    "name": "Salon de Fiestas",
    "description": "Amplio sal√≥n para celebraciones con capacidad para 80 personas, incluye equipo de sonido y aire acondicionado",
    "capacity": 80,
    "booking_price": "500.00"
}

EJEMPLO 2 - √ÅREA M√çNIMA (sin descripci√≥n):
{
    "name": "Cancha de Futbol",
    "capacity": 22,
    "booking_price": "150.00"
}

EJEMPLO 3 - DIFERENTES TIPOS DE PRECIOS:
{
    "name": "Coworking Space",
    "description": "Espacio de trabajo compartido",
    "capacity": 12,
    "booking_price": "75.50"  // Acepta decimales
}

RESPUESTA EXITOSA (201 Created):
{
    "id": 9,
    "name": "Salon de Fiestas",
    "description": "Amplio sal√≥n para celebraciones...",
    "capacity": 80,
    "booking_price": "500.00"
}

================================================================================
üîÑ 7. FORMATO PARA PUT/PATCH (ACTUALIZAR √ÅREA):
================================================================================

ENDPOINT: PUT /api/administration/common-areas/{id}/
ENDPOINT: PATCH /api/administration/common-areas/{id}/

DIFERENCIAS:
- PUT: Requiere TODOS los campos (reemplaza completamente)
- PATCH: Solo los campos que quieres cambiar (actualizaci√≥n parcial)

EJEMPLO PUT (Actualizaci√≥n completa):
{
    "name": "Salon de Eventos Renovado",
    "description": "Sal√≥n completamente renovado con nueva decoraci√≥n",
    "capacity": 60,
    "booking_price": "400.00"
}

EJEMPLO PATCH (Actualizaci√≥n parcial - solo precio):
{
    "booking_price": "350.00"
}

RESPUESTA EXITOSA (200 OK):
{
    "id": 1,
    "name": "Salon de Eventos Renovado",
    "description": "Sal√≥n completamente renovado...",
    "capacity": 60,
    "booking_price": "350.00"
}

================================================================================
üì• 8. FORMATO DE RESPUESTA GET:
================================================================================

ENDPOINT: GET /api/administration/common-areas/

RESPUESTA CON PAGINACI√ìN:
{
    "count": 8,
    "next": null,
    "previous": null,
    "results": [
        {
            "id": 3,
            "name": "Cancha de Tenis",
            "description": "Cancha de tenis profesional iluminada",
            "capacity": 4,
            "booking_price": "100.00"
        },
        {
            "id": 4,
            "name": "Gimnasio",
            "description": "Gimnasio equipado con m√°quinas de ejercicio",
            "capacity": 15,
            "booking_price": "50.00"
        },
        {
            "id": 2,
            "name": "Piscina",
            "description": "Piscina comunitaria con √°rea recreativa",
            "capacity": 30,
            "booking_price": "150.00"
        },
        {
            "id": 1,
            "name": "Sal√≥n de Eventos",
            "description": "Amplio sal√≥n para celebraciones y eventos sociales",
            "capacity": 50,
            "booking_price": "300.00"
        },
        {
            "id": 5,
            "name": "Terraza BBQ",
            "description": "Terraza con parrillas y mesas para asados familiares",
            "capacity": 20,
            "booking_price": "120.00"
        }
    ]
}

ENDPOINT: GET /api/administration/common-areas/{id}/

RESPUESTA √ÅREA INDIVIDUAL:
{
    "id": 1,
    "name": "Sal√≥n de Eventos",
    "description": "Amplio sal√≥n para celebraciones y eventos sociales con capacidad para 50 personas",
    "capacity": 50,
    "booking_price": "300.00"
}

================================================================================
‚ö†Ô∏è 9. POSIBLES PROBLEMAS Y SOLUCIONES:
================================================================================

‚ùå PROBLEMA 1: "Los datos se crean pero no aparecen en el GET"
   CAUSA: Cache del frontend o problemas de actualizaci√≥n
   SOLUCI√ìN: 
   - Verificar que el POST devuelva 201 Created
   - Hacer refresh del GET despu√©s del POST
   - Verificar que no hay filtros activos

‚ùå PROBLEMA 2: Error 400 en POST
   CAUSAS POSIBLES:
   - name vac√≠o o m√°s de 100 caracteres
   - capacity negativo o cero
   - booking_price en formato incorrecto
   - Falta Content-Type: application/json
   
   SOLUCI√ìN:
   ‚úÖ Verificar que name tenga contenido
   ‚úÖ Verificar que capacity > 0
   ‚úÖ Verificar formato decimal: "XXX.XX"
   ‚úÖ Incluir headers correctos

‚ùå PROBLEMA 3: Error 401 Unauthorized
   CAUSA: Token JWT inv√°lido o expirado
   SOLUCI√ìN:
   ‚úÖ Renovar token con /api/token/refresh/
   ‚úÖ Verificar header: Authorization: Bearer <token>

‚ùå PROBLEMA 4: Error 404 en PUT/DELETE
   CAUSA: ID de √°rea inexistente
   SOLUCI√ìN:
   ‚úÖ Verificar que el ID existe con GET /common-areas/
   ‚úÖ Usar IDs v√°lidos de la respuesta del GET

================================================================================
üß™ 10. EJEMPLOS DE TESTING CON CURL:
================================================================================

# 1. OBTENER TOKEN DE AUTENTICACI√ìN:
curl -X POST http://localhost:8000/api/token/ \
  -H "Content-Type: application/json" \
  -d '{"email":"juan.perez@email.com","password":"password123"}'

# 2. LISTAR TODAS LAS √ÅREAS:
curl -X GET http://localhost:8000/api/administration/common-areas/ \
  -H "Authorization: Bearer <tu_token_aqui>"

# 3. CREAR NUEVA √ÅREA:
curl -X POST http://localhost:8000/api/administration/common-areas/ \
  -H "Authorization: Bearer <tu_token_aqui>" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "Sala de Juegos",
    "description": "Sala equipada con mesas de ping pong y billar",
    "capacity": 16,
    "booking_price": "80.00"
  }'

# 4. ACTUALIZAR √ÅREA EXISTENTE:
curl -X PUT http://localhost:8000/api/administration/common-areas/1/ \
  -H "Authorization: Bearer <tu_token_aqui>" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "Sal√≥n de Eventos VIP",
    "description": "Sal√≥n premium para eventos especiales",
    "capacity": 40,
    "booking_price": "450.00"
  }'

# 5. ACTUALIZACI√ìN PARCIAL (solo precio):
curl -X PATCH http://localhost:8000/api/administration/common-areas/1/ \
  -H "Authorization: Bearer <tu_token_aqui>" \
  -H "Content-Type: application/json" \
  -d '{"booking_price": "400.00"}'

# 6. ELIMINAR √ÅREA:
curl -X DELETE http://localhost:8000/api/administration/common-areas/1/ \
  -H "Authorization: Bearer <tu_token_aqui>"

# 7. OBTENER √ÅREA ESPEC√çFICA:
curl -X GET http://localhost:8000/api/administration/common-areas/1/ \
  -H "Authorization: Bearer <tu_token_aqui>"

================================================================================
üìä 11. √ÅREAS COMUNES EXISTENTES EN LA BASE DE DATOS:
================================================================================

ESTADO ACTUAL (basado en logs del servidor):
ID: 1, Name: Sal√≥n de Eventos, Capacity: 50, Price: $300.00
ID: 2, Name: Piscina, Capacity: 30, Price: $150.00
ID: 3, Name: Cancha de Tenis, Capacity: 4, Price: $100.00
ID: 4, Name: Gimnasio, Capacity: 15, Price: $50.00
ID: 5, Name: Terraza BBQ, Capacity: 20, Price: $120.00
ID: 6, Name: prueba, Capacity: 4, Price: (datos de prueba)
ID: 7, Name: sdfsfds, Capacity: 50, Price: (datos de prueba)
ID: 8, Name: dsfsdf, Capacity: 0, Price: (datos de prueba)

NOTA: Las √°reas 6, 7, 8 son datos de prueba que pueden tener informaci√≥n incompleta.

================================================================================
üö® 12. LOGS DE ERROR OBSERVADOS:
================================================================================

LOGS DEL SERVIDOR (√∫ltimos registros):
‚úÖ POST /api/administration/common-areas/ HTTP/1.1" 201 - EXITOSO
‚úÖ GET /api/administration/common-areas/ HTTP/1.1" 200 - EXITOSO

NO SE OBSERVARON ERRORES EN LOS LOGS PARA COMMON AREAS.
Todos los endpoints est√°n funcionando correctamente seg√∫n los logs del servidor.

================================================================================
üîß 13. CONFIGURACI√ìN DEL VIEWSET:
================================================================================

PERMISOS: IsAuthenticated (requiere JWT token)
PAGINACI√ìN: Activada (20 items por p√°gina por defecto)
ORDENAMIENTO: Por nombre (alfab√©tico)
FILTRADO: Disponible con query parameters
M√âTODOS HTTP PERMITIDOS: GET, POST, PUT, PATCH, DELETE, HEAD, OPTIONS

QUERY PARAMETERS SOPORTADOS:
- ?page=1 (paginaci√≥n)
- ?page_size=10 (tama√±o de p√°gina personalizado)
- ?search=nombre (b√∫squeda por nombre)
- ?ordering=name,-capacity (ordenamiento personalizado)

================================================================================
üí° 14. RECOMENDACIONES PARA EL FRONTEND:
================================================================================

1. ‚úÖ AUTENTICACI√ìN:
   - Siempre incluir header Authorization con Bearer token
   - Manejar renovaci√≥n autom√°tica de tokens
   - Redirigir a login si recibe 401

2. ‚úÖ MANEJO DE ERRORES:
   - Validar datos antes de enviar
   - Mostrar mensajes de error espec√≠ficos
   - Manejar casos de red lenta/sin conexi√≥n

3. ‚úÖ UX/UI:
   - Mostrar loading mientras se carga/crea/actualiza
   - Confirmar eliminaciones
   - Actualizar lista despu√©s de operaciones CRUD

4. ‚úÖ VALIDACIONES FRONTEND:
   - name: requerido, m√°ximo 100 caracteres
   - capacity: requerido, n√∫mero positivo
   - booking_price: requerido, formato decimal
   - description: opcional

5. ‚úÖ OPTIMIZACIONES:
   - Usar paginaci√≥n para listas largas
   - Implementar b√∫squeda local o remota
   - Cache inteligente de datos

================================================================================
üèÅ RESUMEN EJECUTIVO:
================================================================================

‚úÖ ESTADO GENERAL: COMPLETAMENTE FUNCIONAL
‚úÖ TODOS LOS ENDPOINTS: OPERATIVOS
‚úÖ AUTENTICACI√ìN: JWT IMPLEMENTADA Y FUNCIONANDO
‚úÖ VALIDACIONES: IMPLEMENTADAS EN EL BACKEND
‚úÖ PAGINACI√ìN: ACTIVADA Y FUNCIONANDO
‚úÖ LOGS: SIN ERRORES OBSERVADOS

El m√≥dulo de √Åreas Comunes est√° completamente implementado y funcionando 
correctamente. Todos los endpoints CRUD est√°n operativos y se han validado 
mediante los logs del servidor.

================================================================================
üìû SOPORTE T√âCNICO:
================================================================================

Si encuentras alg√∫n problema espec√≠fico:
1. Verificar que el servidor Django est√© corriendo en puerto 8000
2. Confirmar que tienes un token JWT v√°lido
3. Revisar los headers de las requests
4. Consultar los logs del servidor para errores espec√≠ficos
5. Verificar que los datos cumplan las validaciones mencionadas

================================================================================
FIN DEL DOCUMENTO
================================================================================
