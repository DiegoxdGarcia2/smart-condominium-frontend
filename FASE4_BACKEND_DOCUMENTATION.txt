SMART CONDOMINIUM - BACKEND API DOCUMENTATION
============================================
FASE 4: GESTI√ìN DE VEH√çCULOS, MASCOTAS Y VISITANTES
==================================================

üìã √çNDICE
---------
1. Endpoints de Veh√≠culos
2. Endpoints de Mascotas  
3. Endpoints de Visitantes
4. Autenticaci√≥n y Permisos
5. C√≥digos de Error
6. Ejemplos de Uso
7. Integraci√≥n Frontend

üöó 1. ENDPOINTS DE VEH√çCULOS
============================

Base URL: /api/administration/vehicles/

1.1 LISTAR VEH√çCULOS
--------------------
GET /api/administration/vehicles/

Filtrado autom√°tico por usuario:
- Residentes: Solo ven sus propios veh√≠culos
- Administradores/Guardias: Ven todos los veh√≠culos

Response:
```json
[
    {
        "id": 1,
        "resident": 2,
        "resident_name": "Juan P√©rez",
        "resident_email": "juan.perez@email.com",
        "unit_number": "A-101",
        "license_plate": "ABC-123",
        "brand": "Toyota",
        "model": "Corolla",
        "color": "Blanco",
        "created_at": "2025-09-12T10:30:00Z"
    }
]
```

1.2 CREAR VEH√çCULO
------------------
POST /api/administration/vehicles/

Body:
```json
{
    "license_plate": "XYZ-789",
    "brand": "Honda",
    "model": "Accord",
    "color": "Negro"
}
```

Notas:
- El resident se asigna autom√°ticamente al usuario autenticado
- license_plate debe ser √∫nico
- Se convierte autom√°ticamente a may√∫sculas

1.3 ACTUALIZAR VEH√çCULO
-----------------------
PUT/PATCH /api/administration/vehicles/{id}/

Body:
```json
{
    "color": "Azul Metalizado",
    "brand": "Honda"
}
```

1.4 ELIMINAR VEH√çCULO
---------------------
DELETE /api/administration/vehicles/{id}/

üêï 2. ENDPOINTS DE MASCOTAS
===========================

Base URL: /api/administration/pets/

2.1 LISTAR MASCOTAS
-------------------
GET /api/administration/pets/

Filtrado autom√°tico por usuario:
- Residentes: Solo ven sus propias mascotas
- Administradores/Guardias: Ven todas las mascotas

Response:
```json
[
    {
        "id": 1,
        "resident": 2,
        "resident_name": "Juan P√©rez",
        "resident_email": "juan.perez@email.com",
        "unit_number": "A-101",
        "name": "Buddy",
        "species": "Perro",
        "breed": "Labrador",
        "age": 3,
        "created_at": "2025-09-12T10:35:00Z"
    }
]
```

2.2 CREAR MASCOTA
-----------------
POST /api/administration/pets/

Body:
```json
{
    "name": "Luna",
    "species": "Gato",
    "breed": "Persa",
    "age": 2
}
```

Opciones de species:
- "Perro"
- "Gato" 
- "Ave"
- "Pez"
- "Otro"

2.3 ACTUALIZAR MASCOTA
----------------------
PUT/PATCH /api/administration/pets/{id}/

Body:
```json
{
    "age": 4,
    "breed": "Labrador Golden"
}
```

2.4 ELIMINAR MASCOTA
--------------------
DELETE /api/administration/pets/{id}/

üë• 3. ENDPOINTS DE VISITANTES
=============================

Base URL: /api/administration/visitor-logs/

3.1 LISTAR REGISTROS DE VISITANTES
----------------------------------
GET /api/administration/visitor-logs/

Filtrado autom√°tico por usuario:
- Residentes: Solo ven visitantes que los han visitado
- Administradores/Guardias: Ven todos los registros

Response:
```json
[
    {
        "id": 1,
        "visitor_name": "Mar√≠a Rodr√≠guez",
        "visitor_dni": "12345678",
        "resident": 2,
        "resident_name": "Juan P√©rez",
        "resident_email": "juan.perez@email.com",
        "unit_number": "A-101",
        "entry_time": "2025-09-12T08:30:00Z",
        "exit_time": null,
        "vehicle_license_plate": "VIS-001",
        "status": "Activo",
        "observations": "Visita familiar",
        "duration_minutes": null
    }
]
```

3.2 REGISTRAR ENTRADA DE VISITANTE
----------------------------------
POST /api/administration/visitor-logs/

Body:
```json
{
    "visitor_name": "Carlos Mendoza",
    "visitor_dni": "87654321",
    "resident": 3,
    "vehicle_license_plate": "VIS-002",
    "observations": "T√©cnico de mantenimiento"
}
```

Notas:
- entry_time se asigna autom√°ticamente
- status se establece como "Activo"
- exit_time es null al crear el registro

3.3 REGISTRAR SALIDA DE VISITANTE
---------------------------------
POST /api/administration/visitor-logs/{id}/register_exit/

Response:
```json
{
    "message": "Salida registrada exitosamente",
    "data": {
        "id": 1,
        "visitor_name": "Mar√≠a Rodr√≠guez",
        "exit_time": "2025-09-12T12:30:00Z",
        "status": "Sali√≥",
        "duration_minutes": 240
    }
}
```

3.4 VISITANTES ACTIVOS
----------------------
GET /api/administration/visitor-logs/active_visitors/

Retorna solo visitantes que est√°n actualmente en el condominio (sin exit_time).

3.5 REPORTE DIARIO
------------------
GET /api/administration/visitor-logs/daily_report/

Response:
```json
{
    "date": "12/09/2025",
    "statistics": {
        "total_visitors": 8,
        "active_visitors": 3,
        "visitors_left": 5
    },
    "visitors": [...]
}
```

üîê 4. AUTENTICACI√ìN Y PERMISOS
=============================

4.1 HEADERS REQUERIDOS
----------------------
```
Authorization: Bearer <JWT_TOKEN>
Content-Type: application/json
```

4.2 FILTRADO POR ROLES
----------------------

RESIDENTES:
- Veh√≠culos: Solo sus propios veh√≠culos
- Mascotas: Solo sus propias mascotas
- Visitantes: Solo visitantes que los han visitado

ADMINISTRADORES/GUARDIAS:
- Acceso completo a todos los registros
- Pueden gestionar veh√≠culos/mascotas de cualquier residente
- Acceso completo a registros de visitantes

4.3 PERMISOS ESPECIALES
-----------------------
- register_exit: Solo admin/guardia pueden registrar salidas
- daily_report: Solo admin/guardia tienen acceso
- active_visitors: Solo admin/guardia tienen acceso

‚ö†Ô∏è 5. C√ìDIGOS DE ERROR
======================

400 - Bad Request:
```json
{
    "license_plate": ["La placa debe tener al menos 6 caracteres."]
}
```

400 - Validaci√≥n de edad:
```json
{
    "age": ["La edad debe estar entre 0 y 30 a√±os."]
}
```

400 - DNI inv√°lido:
```json
{
    "visitor_dni": ["El DNI debe tener al menos 7 caracteres."]
}
```

400 - Visitante ya sali√≥:
```json
{
    "error": "Este visitante ya registr√≥ su salida"
}
```

403 - Forbidden:
```json
{
    "detail": "No tiene permisos para realizar esta acci√≥n."
}
```

409 - Conflict (placa duplicada):
```json
{
    "license_plate": ["vehicle con este placa del veh√≠culo ya existe."]
}
```

üìù 6. EJEMPLOS DE USO
====================

6.1 FLUJO COMPLETO DE VEH√çCULO
------------------------------

1. Autenticarse:
```bash
curl -X POST http://localhost:8000/api/auth/login/ \
  -H "Content-Type: application/json" \
  -d '{"email": "juan.perez@email.com", "password": "password123"}'
```

2. Registrar veh√≠culo:
```bash
curl -X POST http://localhost:8000/api/administration/vehicles/ \
  -H "Authorization: Bearer <token>" \
  -H "Content-Type: application/json" \
  -d '{
    "license_plate": "NEW-456",
    "brand": "BMW",
    "model": "X3",
    "color": "Negro"
  }'
```

3. Listar mis veh√≠culos:
```bash
curl -X GET http://localhost:8000/api/administration/vehicles/ \
  -H "Authorization: Bearer <token>"
```

6.2 FLUJO COMPLETO DE VISITANTE
-------------------------------

1. Registrar entrada:
```bash
curl -X POST http://localhost:8000/api/administration/visitor-logs/ \
  -H "Authorization: Bearer <guardia_token>" \
  -H "Content-Type: application/json" \
  -d '{
    "visitor_name": "Roberto Silva",
    "visitor_dni": "98765432",
    "resident": 2,
    "vehicle_license_plate": "VIS-003",
    "observations": "Delivery"
  }'
```

2. Ver visitantes activos:
```bash
curl -X GET http://localhost:8000/api/administration/visitor-logs/active_visitors/ \
  -H "Authorization: Bearer <guardia_token>"
```

3. Registrar salida:
```bash
curl -X POST http://localhost:8000/api/administration/visitor-logs/1/register_exit/ \
  -H "Authorization: Bearer <guardia_token>"
```

üåê 7. INTEGRACI√ìN FRONTEND
==========================

7.1 COMPONENTES SUGERIDOS
-------------------------
- VehicleList: Lista de veh√≠culos del residente
- VehicleForm: Formulario para agregar/editar veh√≠culos
- PetList: Lista de mascotas del residente
- PetForm: Formulario para agregar/editar mascotas
- VisitorRegistry: Panel para guardias/admin
- VisitorDashboard: Dashboard con estad√≠sticas diarias
- ActiveVisitors: Lista en tiempo real de visitantes

7.2 ESTADOS DE LA APLICACI√ìN
----------------------------
```javascript
// Estado para veh√≠culos
const vehicleState = {
  vehicles: [],
  loading: false,
  error: null
};

// Estado para mascotas
const petState = {
  pets: [],
  loading: false,
  error: null
};

// Estado para visitantes
const visitorState = {
  visitors: [],
  activeVisitors: [],
  dailyStats: null,
  loading: false,
  error: null
};
```

7.3 SERVICIOS API SUGERIDOS
---------------------------
```javascript
// vehicleService.js
export const vehicleAPI = {
  getMyVehicles: () => api.get('/vehicles/'),
  createVehicle: (data) => api.post('/vehicles/', data),
  updateVehicle: (id, data) => api.patch(`/vehicles/${id}/`, data),
  deleteVehicle: (id) => api.delete(`/vehicles/${id}/`)
};

// petService.js
export const petAPI = {
  getMyPets: () => api.get('/pets/'),
  createPet: (data) => api.post('/pets/', data),
  updatePet: (id, data) => api.patch(`/pets/${id}/`, data),
  deletePet: (id) => api.delete(`/pets/${id}/`)
};

// visitorService.js
export const visitorAPI = {
  getAllVisitors: () => api.get('/visitor-logs/'),
  registerEntry: (data) => api.post('/visitor-logs/', data),
  registerExit: (id) => api.post(`/visitor-logs/${id}/register_exit/`),
  getActiveVisitors: () => api.get('/visitor-logs/active_visitors/'),
  getDailyReport: () => api.get('/visitor-logs/daily_report/')
};
```

üéØ RESUMEN ENDPOINTS FASE 4
===========================

VEH√çCULOS:
‚úÖ GET    /api/administration/vehicles/          - Listar veh√≠culos
‚úÖ POST   /api/administration/vehicles/          - Crear veh√≠culo
‚úÖ GET    /api/administration/vehicles/{id}/     - Detalle veh√≠culo
‚úÖ PUT    /api/administration/vehicles/{id}/     - Actualizar veh√≠culo
‚úÖ DELETE /api/administration/vehicles/{id}/     - Eliminar veh√≠culo

MASCOTAS:
‚úÖ GET    /api/administration/pets/              - Listar mascotas
‚úÖ POST   /api/administration/pets/              - Crear mascota
‚úÖ GET    /api/administration/pets/{id}/         - Detalle mascota
‚úÖ PUT    /api/administration/pets/{id}/         - Actualizar mascota
‚úÖ DELETE /api/administration/pets/{id}/         - Eliminar mascota

VISITANTES:
‚úÖ GET    /api/administration/visitor-logs/                    - Listar registros
‚úÖ POST   /api/administration/visitor-logs/                    - Registrar entrada
‚úÖ GET    /api/administration/visitor-logs/{id}/               - Detalle registro
‚úÖ PUT    /api/administration/visitor-logs/{id}/               - Actualizar registro
‚úÖ DELETE /api/administration/visitor-logs/{id}/               - Eliminar registro
‚úÖ POST   /api/administration/visitor-logs/{id}/register_exit/ - Registrar salida
‚úÖ GET    /api/administration/visitor-logs/active_visitors/    - Visitantes activos
‚úÖ GET    /api/administration/visitor-logs/daily_report/       - Reporte diario

üìä ESTAD√çSTICAS DE LA FASE 4
============================
- 3 nuevos modelos implementados
- 15 endpoints CRUD funcionales
- 3 endpoints especiales para visitantes
- Filtrado autom√°tico por roles
- Validaciones robustas
- Datos de prueba completos
- Documentaci√≥n t√©cnica detallada

üéâ ¬°FASE 4 LISTA PARA PRODUCCI√ìN!
=================================